package com.example.accessingdatamysql.controller;

import com.example.accessingdatamysql.dto.CreateUserDTO;
import com.example.accessingdatamysql.dto.DisplayUserDTO;
import com.example.accessingdatamysql.entity.User;
import com.example.accessingdatamysql.errorhandling.NoUserWithIdException;
import com.example.accessingdatamysql.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;

import static com.example.accessingdatamysql.dto.CreateUserDTO.fromDTO;

@RestController // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URLs start with /demo (after Application path)
@CrossOrigin(origins = "*",  allowedHeaders="*")
public class UserController {
    @Autowired // This means to get the bean called userService
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserService userService;


    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody DisplayUserDTO addNewUser (@RequestParam String name,
                                                    @RequestParam String email,
                                                    @RequestParam String password) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        CreateUserDTO createUserDTO = new CreateUserDTO();
        createUserDTO.setName(name);
        createUserDTO.setEmail(email);
        createUserDTO.setPassword(password);
        CreateUserDTO createUserDTOSaved = userService.saveUser(createUserDTO);
        return DisplayUserDTO.fromCreatedUserDTO(createUserDTOSaved);
    }

    @PostMapping(path="/add/path-variable/{name}/{email}/{password}") // Map ONLY POST Requests
    public @ResponseBody DisplayUserDTO addNewUserWithPathVariables (@PathVariable("name") String name,
                                                                     @PathVariable("email") String email,
                                                                     @PathVariable("password") String password) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        CreateUserDTO createUserDTO = new CreateUserDTO();
        createUserDTO.setName(name);
        createUserDTO.setEmail(email);
        createUserDTO.setPassword(password);
        CreateUserDTO createUserDTOSaved = userService.saveUser(createUserDTO);
        return DisplayUserDTO.fromCreatedUserDTO(createUserDTOSaved);
    }

    @PostMapping(path="/add/request-body")
    public @ResponseBody DisplayUserDTO addNewUserWithRequestBody(@RequestBody CreateUserDTO createUserDTO) {
        CreateUserDTO createUserDTOSaved = userService.saveUser(createUserDTO);
        return DisplayUserDTO.fromCreatedUserDTO(createUserDTOSaved);
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<DisplayUserDTO> getAllUsers() {
        // This returns a JSON or XML with the users
        return userService.findAllUsers();
    }

    @GetMapping(path="/")
    public @ResponseBody String getHello() {
        // This returns a JSON or XML with the users
        return "Hello World!";
    }

    @GetMapping(path="/{id}")
    public @ResponseBody DisplayUserDTO getUserById(@PathVariable("id") Integer id) {
        try {
            return userService.getUserById(id);
        } catch (Exception e) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, e.getMessage(), e);
        }
    }

    @DeleteMapping(path="/delete/{id}")
    public @ResponseBody DisplayUserDTO deleteUser(@PathVariable("id") Integer id) throws NoUserWithIdException {
        return userService.deleteUser(id);
    }

    @PutMapping(path="/user/{id}")
    public @ResponseBody DisplayUserDTO updateUser(@PathVariable("id") Integer id, @RequestBody CreateUserDTO createUserDTO) {
        try {
            CreateUserDTO createNewUserDTO = userService.updateUser(id, createUserDTO);
            return DisplayUserDTO.fromCreatedUserDTO(createNewUserDTO);
        } catch (Exception e) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, e.getMessage(), e);
        }
    }
}